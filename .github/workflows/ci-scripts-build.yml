# .github/workflows/ci-scripts-build.yml for use with EPICS Base ci-scripts
# (see: https://github.com/epics-base/ci-scripts)

# This is YAML - indentation levels are crucial

# Workflow name, shared by all branches

name: gtest

# Trigger on pushes and PRs to any branch
on:
  push:
    paths-ignore:
      - '.gitattributes'
      - '**/*.html'
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '.gitattributes'
      - '**/*.html'
      - '**/*.md'
  workflow_dispatch:

env:
    SETUP_PATH: .ci-local:.ci

jobs:
  native:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    # Set environment variables from matrix parameters
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      BASE: ${{ matrix.base }}
      CI_CROSS_TARGETS: ${{ matrix.cross }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
      BASE_HOOK: ${{ matrix.base_hook }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - name: "Ub-22 gcc-11 Base 7.0"
            os: ubuntu-22.04
            cmp: gcc
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-22 gcc-11 static Base 7.0"
            os: ubuntu-22.04
            cmp: gcc
            configuration: static
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 Base 7.0"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 static Base 7.0"
            os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 Base 3.15"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "3.15"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 static Base 3.15"
            os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "3.15"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 Base 3.15.3"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "R3.15.3"
            base_hook: ".ci-local/base-3.15-config-fix.patch"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 static Base 3.15.3"
            os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "R3.15.3"
            base_hook: ".ci-local/base-3.15-config-fix.patch"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 Base 3.14.12.8"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "R3.14.12.8"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 static Base 3.14.12.8"
            os: ubuntu-20.04
            cmp: gcc
            configuration: static
            base: "R3.14.12.8"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-20 gcc-9 + MinGW64"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            cross: "windows-x64-mingw"

          - name: "Ub-20 clang-10"
            os: ubuntu-20.04
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Ub-22 clang-14"
            os: ubuntu-22.04
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "RTEMS 5"
            os: ubuntu-20.04
            cmp: gcc
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"
            cross: "RTEMS-pc686-qemu@5"

          - name: "MacOS clang-12"
            os: macos-latest
            cmp: clang
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Win2019 MSC-19"
            os: windows-2019
            cmp: vs2019
            configuration: default
            base: "7.0"

          - name: "Win2019 MSC-19 static"
            os: windows-2019
            cmp: vs2019
            configuration: static
            base: "7.0"

          - name: "Win2019 MSC-19 debug"
            os: windows-2019
            cmp: vs2019
            configuration: debug
            base: "7.0"

          - name: "Win2019 MSC-19 Base 3.15"
            os: windows-2019
            cmp: vs2019
            configuration: default
            base: "3.15"

          - name: "Win2019 mingw"
            os: windows-2019
            cmp: gcc
            configuration: default
            base: "7.0"
            extra: "CMD_CXXFLAGS=-std=c++11"

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Automatic core dumper analysis
      uses: mdavidsaver/ci-core-dumper@master
    - name: "apt-get install"
      run: |
        sudo apt-get update
        sudo apt-get -y install qemu-system-x86 g++-mingw-w64-x86-64 gdb
      if: runner.os == 'Linux'
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 60M test
    - name: Upload tapfiles Artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: Collect and show test results
      if: ${{ always() }}
      run: python .ci/cue.py -T 5M test-results

  docker:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    # Set environment variables from matrix parameters
    env:
      CMP: ${{ matrix.cmp }}
      BCFG: ${{ matrix.configuration }}
      EXTRA: ${{ matrix.extra }}
      TEST: ${{ matrix.test }}
    strategy:
      fail-fast: false
      matrix:
        # Job names also name artifacts, character limitations apply
        include:
          - name: "CentOS-8"
            image: centos:8
            cmp: gcc
            configuration: default
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Rocky-9"
            image: rockylinux:9
            cmp: gcc
            configuration: default
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Fedora-33"
            image: fedora:33
            cmp: gcc
            configuration: default
            extra: "CMD_CXXFLAGS=-std=c++11"

          - name: "Fedora-latest"
            image: fedora:latest
            cmp: gcc
            configuration: default
            extra: "CMD_CXXFLAGS=-std=c++11"

    steps:
    - name: "Fix repo URLs on CentOS-8"
      # centos:8 is frozen, repos are in the vault
      if: matrix.image=='centos:8'
      run: |
        sed -i -e "s|mirrorlist=|#mirrorlist=|" \
        -e "s|#baseurl=http://mirror|baseurl=http://vault|" \
        /etc/yum.repos.d/CentOS-Linux-{BaseOS,AppStream,Extras,Plus}.repo
    - name: "Redhat setup"
      run: |
        dnf -y install python3 gdb make perl gcc-c++ glibc-devel readline-devel ncurses-devel perl-devel perl-Test-Simple
        git --version || dnf -y install git
        # rather than just bite the bullet and link python3 -> python,
        # people would rather just break all existing scripts...
        [ -e /usr/bin/python ] || ln -sf python3 /usr/bin/python
        python --version
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Automatic core dumper analysis
      uses: mdavidsaver/ci-core-dumper@master
    - name: Prepare and compile dependencies
      run: python .ci/cue.py prepare
    - name: Build main module
      run: python .ci/cue.py build
    - name: Run main module tests
      run: python .ci/cue.py -T 20M test
    - name: Upload tapfiles Artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: tapfiles ${{ matrix.name }}
        path: '**/O.*/*.tap'
        if-no-files-found: ignore
    - name: Collect and show test results
      if: ${{ always() }}
      run: python .ci/cue.py -T 5M test-results
